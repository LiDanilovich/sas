/**************************************************************************** 
 * Job:             JB_J_LA_DNA_FIX_CONTINGENCIA          A531G57B.BY0000MG * 
 * Description:                                                             * 
 *                                                                          * 
 * Metadata Server: ip-172-31-253-40.ec2.internal                           * 
 * Port:            8561                                                    * 
 * Location:        /CWC/CMS/Jobs/FIX/New Susc_id                           * 
 *                                                                          * 
 * Server:          SASApp                                A531G57B.AS000002 * 
 *                                                                          * 
 * Source Tables:   LA_DNA_FIX_BASE_SNAP -                A531G57B.BG0000PU * 
 *                   jlanding.LA_DNA_FIX_BASE_SNAP                          * 
 *                  DM_LINEOFBUSINESS_FIX -               A531G57B.BG0000SO * 
 *                   JDATAMAT.DM_LINEOFBUSINESS_FIX                         * 
 *                                                                          * 
 * Generated on:    Monday, June 26, 2023 8:25:12 PM UTC                    * 
 * Generated by:    sasdemo                                                 * 
 * Version:         SAS Data Integration Studio 4.904                       * 
 ****************************************************************************/ 

/* Generate the process id for job  */ 
%put Process ID: &SYSJOBID;

/* General macro variables  */ 
%let jobID = %quote(A531G57B.BY0000MG);
%let etls_jobName = %nrquote(JB_J_LA_DNA_FIX_CONTINGENCIA);
%let etls_userID = %nrquote(sasdemo);

/* Setup to capture return codes  */ 
%global job_rc trans_rc sqlrc;
%let sysrc = 0;
%let job_rc = 0;
%let trans_rc = 0;
%let sqlrc = 0;
%let syscc = 0;
%global etls_stepStartTime; 
/* initialize syserr to 0 */ 
data _null_; run;

%macro rcSet(error); 
   %if (&error gt &trans_rc) %then 
      %let trans_rc = &error;
   %if (&error gt &job_rc) %then 
      %let job_rc = &error;
%mend rcSet; 

%macro rcSetDS(error); 
   if &error gt input(symget('trans_rc'),12.) then 
      call symput('trans_rc',trim(left(put(&error,12.))));
   if &error gt input(symget('job_rc'),12.) then 
      call symput('job_rc',trim(left(put(&error,12.))));
%mend rcSetDS; 

/* Create metadata macro variables */
%let IOMServer      = %nrquote(SASApp);
%let metaPort       = %nrquote(8561);
%let metaServer     = %nrquote(ip-172-31-253-40.ec2.internal);

/* Setup for capturing job status  */ 
%let etls_startTime = %sysfunc(datetime(),datetime.);
%let etls_recordsBefore = 0;
%let etls_recordsAfter = 0;
%let etls_lib = 0;
%let etls_table = 0;

%global etls_debug; 
%macro etls_setDebug; 
   %if %str(&etls_debug) ne 0 %then 
      OPTIONS MPRINT%str(;); 
%mend; 
%etls_setDebug; 

/*==========================================================================* 
 * Step:            Actualiza DNA Contingencia            A531G57B.BZ0002W8 * 
 * Transform:       User Written                                            * 
 * Description:                                                             * 
 *                                                                          * 
 * Source Tables:   LA_DNA_FIX_BASE_SNAP -                A531G57B.BG0000PU * 
 *                   jlanding.LA_DNA_FIX_BASE_SNAP                          * 
 *                  DM_LINEOFBUSINESS_FIX -               A531G57B.BG0000SO * 
 *                   JDATAMAT.DM_LINEOFBUSINESS_FIX                         * 
 * Target Table:    User Written - work.WM51V7EF          A531G57B.C40000XP * 
 *                                                                          * 
 * User Written:    SourceCode                                              * 
 *==========================================================================*/ 

%let transformID = %quote(A531G57B.BZ0002W8);
%let trans_rc = 0;
%let etls_stepStartTime = %sysfunc(datetime(), datetime20.); 

/* Access the data for Lib J_LANDING  */ 
LIBNAME jlanding ORACLE  PATH=oracms  SCHEMA=J_LANDING  AUTHDOMAIN="CICDM_DOMAIN" ;
%rcSet(&syslibrc); 

/* Access the data for Lib J_DATAMART  */ 
LIBNAME JDATAMAT ORACLE  PATH=oracms  SCHEMA=J_DATAMART  AUTHDOMAIN="CICDM_DOMAIN" ;
%rcSet(&syslibrc); 

%let etls_recnt = 0;
%macro etls_recordCheck; 
   %let etls_recCheckExist = %eval(%sysfunc(exist(jlanding.LA_DNA_FIX_BASE_SNAP, DATA)) or 
         %sysfunc(exist(jlanding.LA_DNA_FIX_BASE_SNAP, VIEW))); 
   
   %if (&etls_recCheckExist) %then
   %do;
      proc sql noprint;
         select count(*) into :etls_recnt from jlanding.LA_DNA_FIX_BASE_SNAP;
      quit;
   %end;
%mend etls_recordCheck;
%etls_recordCheck;

%let _INPUT_count = 2;
%let _INPUT = jlanding.LA_DNA_FIX_BASE_SNAP;
%let _INPUT_connect =  PATH=oracms AUTHDOMAIN="CICDM_DOMAIN" 
;
%let _INPUT_engine = ORACLE;
%let _INPUT_memtype = DATA;
%let _INPUT_options = %nrquote();
%let _INPUT_alter = %nrquote();
%let _INPUT_path = %nrquote(/CWC/CMS/Data/Tables/J_LANDING/LA_DNA_FIX_BASE_SNAP%(Table%));
%let _INPUT_type = 1;
%let _INPUT_label = %nrquote();
%let _INPUT_filetype = PhysicalTable;

%let _INPUT1 = jlanding.LA_DNA_FIX_BASE_SNAP;
%let _INPUT1_connect =  PATH=oracms AUTHDOMAIN="CICDM_DOMAIN" 
;
%let _INPUT1_engine = ORACLE;
%let _INPUT1_memtype = DATA;
%let _INPUT1_options = %nrquote();
%let _INPUT1_alter = %nrquote();
%let _INPUT1_path = %nrquote(/CWC/CMS/Data/Tables/J_LANDING/LA_DNA_FIX_BASE_SNAP%(Table%));
%let _INPUT1_type = 1;
%let _INPUT1_label = %nrquote();
%let _INPUT1_filetype = PhysicalTable;

%let _INPUT2 = JDATAMAT.DM_LINEOFBUSINESS_FIX;
%let _INPUT2_connect =  PATH=oracms AUTHDOMAIN="CICDM_DOMAIN" 
;
%let _INPUT2_engine = ORACLE;
%let _INPUT2_memtype = DATA;
%let _INPUT2_options = %nrquote();
%let _INPUT2_alter = %nrquote();
%let _INPUT2_path = %nrquote(/CWC/CMS/Data/Tables/J_DATAMART/DM_LINEOFBUSINESS_FIX%(Table%));
%let _INPUT2_type = 1;
%let _INPUT2_label = %nrquote();
%let _INPUT2_filetype = PhysicalTable;

%let _OUTPUT_count = 1;
%let _OUTPUT = work.WM51V7EF;
%let _OUTPUT_connect = ;
%let _OUTPUT_engine = ;
%let _OUTPUT_memtype = DATA;
%let _OUTPUT_options = %nrquote();
%let _OUTPUT_alter = %nrquote();
%let _OUTPUT_path = %nrquote(/User Written_A531G57B.C40000XP%(WorkTable%));
%let _OUTPUT_type = 1;
%let _OUTPUT_label = %nrquote();
%let _OUTPUT_col_count = 0;
%let _OUTPUT_filetype = WorkTable;

%let _OUTPUT1 = work.WM51V7EF;
%let _OUTPUT1_connect = ;
%let _OUTPUT1_engine = ;
%let _OUTPUT1_memtype = DATA;
%let _OUTPUT1_options = %nrquote();
%let _OUTPUT1_alter = %nrquote();
%let _OUTPUT1_path = %nrquote(/User Written_A531G57B.C40000XP%(WorkTable%));
%let _OUTPUT1_type = 1;
%let _OUTPUT1_label = %nrquote();
%let _OUTPUT1_col_count = 0;
%let _OUTPUT1_filetype = WorkTable;

/*---- Start of User Written Code  ----*/ 


/* para cada cmpny_cty_nm de la tabla dm_lnofbusiness_fix extrae del DNA
  "nuevo" registros separados por isla y billing provider (hasta ahora Cerillion, 
 Liberate y AmDocs).  Si encuentra datos, elimina registros de esa isla/proveedor 
 e inserta lo nuevo en j_landing.LA_DNA_FIX_CONTINGENCIA */


proc sql;
     select prefijo, cmpny_cty_nm, 
            mcc,cmpny_cty_pfx,threshold_lib,threshold_cer,
            threshold_amd,LNOFBSN_ID,  count(*) 
            into 
            :prefix1-, :cntry1- ,:mcc1- ,:cty_pfx1-, :threshold_lib1-, 
            :threshold_cer1-, :threshold_amd1-, :LNOFBSN_ID1- ,:total1-
     from &_input2.
     where ACTIVE='Y'
     ;
quit;


%macro genera_cerillion(pre,cntry);
       data &pre._C;
	        set &_input1.;
 			where ORG_CNTRY="&cntry." and length(STRIP(PUT(ACT_ACCT_CD ,12.)))=8;
			attrib prefijo length=$3.;
			attrib mcc length=8;
			attrib cmpny_cty_pfx length=$50 ;
			attrib threshold_lib length=8 ;
			attrib threshold_cer length=8;
			attrib threshold_amd length=8;
         attrib lnofbsn_id length=8;

		   prefijo = "&&prefix&i.";
			mcc = &&mcc&i.;
			cmpny_cty_pfx = "&&cty_pfx&i.";
			threshold_lib = &&threshold_lib&i.;
			threshold_cer = &&threshold_cer&i.;
			threshold_amd = &&threshold_amd&i.;
	      lnofbsn_id = &&lnofbsn_id&i.;
       run;
%mend;


%macro genera_liberate(pre,cntry);
       data &pre._L;
	        set &_input1.;
 			where ORG_CNTRY="&cntry." and  length(STRIP(PUT(ACT_ACCT_CD ,12.)))=12;
			attrib prefijo length=$3.;
			attrib mcc length=8;
			attrib cmpny_cty_pfx length=$50 ;
			attrib threshold_lib length=8 ;
			attrib threshold_cer length=8;
			attrib threshold_amd length=8;
	      attrib lnofbsn_id length=8;

			prefijo = "&&prefix&i.";
			mcc = &&mcc&i.;
			cmpny_cty_pfx = "&&cty_pfx&i.";
			threshold_lib = &&threshold_lib&i.;
			threshold_cer = &&threshold_cer&i.;
			threshold_amd = &&threshold_amd&i.;
         lnofbsn_id = &&lnofbsn_id&i.;

       run;
%mend;


%macro genera_amdocs(pre,cntry);
       data &pre._A;
	        set &_input1.;
 			where ORG_CNTRY="&cntry."  and  length(STRIP(PUT(ACT_ACCT_CD ,12.)))=10;
			attrib prefijo length=$3.;
			attrib mcc length=8;
			attrib cmpny_cty_pfx length=$50 ;
			attrib threshold_lib length=8 ;
			attrib threshold_cer length=8;
			attrib threshold_amd length=8;
			attrib lnofbsn_id length=8;

         prefijo = "&&prefix&i.";
			mcc = &&mcc&i.;
			cmpny_cty_pfx = "&&cty_pfx&i.";
			threshold_lib = &&threshold_lib&i.;
			threshold_cer = &&threshold_cer&i.;
			threshold_amd = &&threshold_amd&i.;
         lnofbsn_id = &&lnofbsn_id&i.;
			
       run;
%mend;


** para las que encontramos registros, reemplazamos en las tablas x isla x bill.provider;
%macro actualiza_isla(pre,prov);
       proc sql noprint;
            select count(*) into :totIsla 
            from &pre._&prov;
       quit;

       %IF &totIsla. > 0 %THEN %DO;
           proc sql;
                connect to ORACLE
                (PATH=oracms AUTHDOMAIN="CICDM_DOMAIN"); 
                reset noprint; 
                execute 
                (truncate table J_LANDING.LA_DNA_FIX_&pre._&prov
                 ) by ORACLE; 
         
                %rcSet(&sqlrc); 
         
                disconnect from ORACLE; 
           quit; 
   
           proc append base = jlanding.LA_DNA_FIX_&pre._&prov
                data = &pre._&prov force ; 
           run; 
                  
     %END;
     ** en Work.DNA acumulo datos de cada isla/prov;
     proc append base=Work.DNA_FIX data=jlanding.LA_DNA_FIX_&pre._&prov
        force;
     run;

%mend;

%macro actualiza_dna_contingencia;
      proc sql;
         connect to ORACLE
         ( 
             PATH=oracms AUTHDOMAIN="CICDM_DOMAIN" 
         ); 
         reset noprint; 
         
         execute 
         ( 
            truncate table J_LANDING.LA_DNA_FIX_CONTINGENCIA
         ) by ORACLE; 
         
         %rcSet(&sqlrc); 
         
         disconnect from ORACLE; 
      quit; 
  
   /*---- Append  ----*/ 
   %put %str(NOTE: Appending data ...);
   
   proc append base = jlanding.LA_DNA_FIX_CONTINGENCIA
      data = work.DNA_FIX  force ; 
   run;

%mend;


%macro genera_islas;

      
      proc sql;
           create table work.dna_fix like jlanding.la_dna_fix_contingencia;
      quit;

      %do i=1 %to &total1. ;
          %genera_cerillion(&&prefix&i.,&&cntry&i.);
          %actualiza_isla(&&prefix&i.,C);
                    
          %genera_liberate(&&prefix&i.,&&cntry&i.);
          %actualiza_isla(&&prefix&i.,L);




           %if "&&prefix&i" = "CWO" %then %do;
           ** tratamiento especial para AmDocs, solo curacao;
              /* se reemplaza por las siguientes 2 lineas
              %genera_amDocs(CWO_A,UTS);
              %actualiza_isla(CWO,A);
              */

         
              %genera_amDocs(&&prefix&i.,&&cntry&i.);
              %actualiza_isla(&&prefix&i.,A);

          %end;


      %end;
	   
	
      %actualiza_dna_contingencia;

 %mend;

%genera_islas;



/*---- End of User Written Code  ----*/ 

%rcSet(&syserr); 
%rcSet(&sqlrc); 


/** Step end Actualiza DNA Contingencia **/

%let etls_endTime = %sysfunc(datetime(),datetime.);

